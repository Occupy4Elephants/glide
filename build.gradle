subprojects {
    apply plugin: 'groovy'

    group 'io.github.kdabir.glide'

    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
    }

}

task releaseFilters(dependsOn: ':glide-filters:release')
task releasePlugin(dependsOn: ':glide-gradle-plugin:release')
task releaseRunner(dependsOn: ':glide-runner:release')

// some helpers
task publishedVersions << {
    ['glide-filters', 'glide-gradle-plugin'].each { printVersions(it) }
    printGitTags()
}


task wrapper(type: Wrapper){
    gradleVersion = gradleVersion
}

def printVersions(String component) {
    def metadata = new XmlSlurper().parse("https://dl.bintray.com/kdabir/glide/io/github/kdabir/glide/${component}/maven-metadata.xml")

    def allVersions = metadata.versioning.versions.version*.text()
    def latestVersion = metadata.versioning.latest.text()
    logger.quiet """
        # $component
        Available versions : ${allVersions}
        Latest version : $latestVersion \
        """.stripIndent()
}

import groovy.json.JsonSlurper
def printGitTags(){
    def tags = new JsonSlurper()
        .parse(new URL("https://api.github.com/repos/kdabir/glide/git/refs/tags"))*.ref.collect { it.split("/").last() }
    logger.quiet """
        # tags \
        """.stripIndent()

    logger.quiet tags.join("\n")
}

/* ------ Gradle.com build-scan --------- */
plugins {
    id 'com.gradle.build-scan' version '1.0'
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}
/* --------------  */
