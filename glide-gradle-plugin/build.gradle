plugins {
    id 'idea'
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'net.researchgate.release' version '2.4.0'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'com.jfrog.bintray' version '1.7.3'
}

configurations {
    testIntegrationCompile.extendsFrom testCompile
    testIntegrationRuntime.extendsFrom testRuntime

    glideFilters
}

/**
 * If groovy is not excluded in transitive deps, build Fails with:
 * groovy.lang.GroovyRuntimeException: Conflicting module versions.
 * Module [groovy-all is loaded in version 2.3.10 and you are trying to load version 2.4.3
 */
dependencies {
    compile gradleApi()
    compile localGroovy()
    testCompile gradleTestKit()

    compile "org.gradle.api.plugins:gradle-gaelyk-plugin:${gaelykGradlePluginVersion}", {
        exclude group: 'io.github.kdabir.directree'
    }

    compile "com.google.appengine:gradle-appengine-plugin:${appengineGradlePluginVersion}"

    compile "io.github.kdabir.directree:directree:${directreeVersion}", {
        exclude group: 'org.codehaus.groovy'
    }

    // only for resolving latest verion in development. hence a new configuration.
    if (project.hasProperty('useLatestGlideFilters')) {
        glideFilters project(":glide-filters")
    }

    testCompile "junit:junit:${junitVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}", {
        exclude group: 'org.codehaus.groovy'
    }

}


def INTG_TEST_ROOT = 'test-intg'

sourceSets {
    main.groovy.srcDirs = ['src']
    test.groovy.srcDirs = ['test']

    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testResources']

    main.java.srcDirs = test.java.srcDirs = []

    testIntegration {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            srcDirs = [INTG_TEST_ROOT]
        }
    }
}

gradlePlugin { // to make int test classes available to tests
    testSourceSets sourceSets.testIntegration
}

idea {
    module {
        testSourceDirs += file(INTG_TEST_ROOT)
        scopes.TEST.plus += [configurations.testIntegrationRuntime]
    }
}


jar {
    manifest {
        attributes(
                "Implementation-Title": "Gradle",
                "Implementation-Version": project.version
        )
    }
}

import org.apache.tools.ant.filters.*


project.afterEvaluate {
    tasks.withType(ProcessResources) { processResources ->

        def versions = project.properties.findAll { k, v -> k.endsWith("Version") && v instanceof String }
        processResources.inputs.properties(versions) // so that resources are processed on version change
        processResources.inputs.property('useLatestGlideFilters', project.hasProperty('useLatestGlideFilters'))

        def selfVersion = project.version.toString()
        versions.put("glideGradlePluginVersion", selfVersion)

        // pass from command line when required to bundle latest filters with glide gradle plugin
        if (project.hasProperty('useLatestGlideFilters')) {
            def filtersProjectVersion = project.configurations.glideFilters.dependencies.first().version.toString()
            versions.put("glideFiltersVersion", filtersProjectVersion)
            logger.quiet("*** Using latest glide-filters, which might not be published : $filtersProjectVersion ***")
        }

        filter(ReplaceTokens, tokens: versions)
    }
}

description = "Glide Gradle plugin makes it incredebily easy to develop and deploy webapps for Google App Engine"

task integrationTest(type: Test) {
    dependsOn ":glide-filters:publishToMavenLocal"
    group = "verification"
    description = "runs the integration tests"

    testClassesDir = sourceSets.testIntegration.output.classesDir
    classpath = sourceSets.testIntegration.runtimeClasspath

    testLogging {
        events "failed"
        exceptionFormat "full"
    }

}

publishing {
    publications {
        gradlePlugin(MavenPublication) {
            from components.java
        }
    }
    println configurations.runtime.allDependencies
}

// set bintrayUser & bintrayKey in gradle.properties
bintray {
    user = project.properties.get "bintrayUser"
    key = project.properties.get "bintrayKey"
    publications = ['gradlePlugin']

    def projectName = project.name
    def projectDescription = project.description

    pkg {
        repo = 'glide'
        name = projectName      // somehow project.* doesn't work in this closure
        desc = projectDescription
        licenses = ['MIT']
        vcsUrl = 'https://github.com/kdabir/glide.git'
    }
//    dryRun = true // whether to run this as dry-run, without deploying
}


release {
    tagTemplate = '$name-$version'
}

pluginBundle {
    website = 'https://glide-gae.appspot.com'
    vcsUrl = 'https://github.com/kdabir/glide.git'
    description = project.description
    tags = ['appengine', 'gaelyk', 'glide', 'cloud', 'microservices', 'serverless', 'no-ops', 'java', 'groovy', 'autoscale']

    plugins {
        glideGradlePlugin {
            id = 'com.appspot.glide-gae'
            displayName = 'Glide Gradle Plugin'
        }
    }
}

task jarWithLibs(type: Copy, dependsOn: 'jar') {
    from configurations.runtime
    into "build/libs/deps"
}

afterReleaseBuild.dependsOn bintrayUpload, publishPlugins
